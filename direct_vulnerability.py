# direct_vulnerability.py

import subprocess

def run_local_command():
    """
    This function contains a source and a sink in the same scope.
    It's a straightforward command injection vulnerability that does not
    require cross-file analysis to detect.
    """
    # SOURCE: The input() function reads directly from the user.
    # This is a classic source of tainted data.
    user_input = input("Enter a system command to run (e.g., 'ls -l'): ")

    print(f"Executing your command: {user_input}")

    try:
        # SINK: The user_input variable flows directly into subprocess.run
        # with shell=True, creating a clear command injection vulnerability.
        subprocess.run(user_input, shell=True, check=True)
        print("Command finished.")
    except Exception as e:
        print(f"An error occurred: {e}")

if __name__ == "__main__":
    run_local_command()
